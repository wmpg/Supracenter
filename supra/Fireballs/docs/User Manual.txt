User Manual
#################################
For:
    GetIRISData.py
    MakeIRISPicks.py
    SeismicTrajectory.py

For analyzing seismic data, and estimating 
the ballistic trajectory.

Denis Vida, Peter Brown, Luke McFadden
Thanks to Gunter Stober for advice on atmospheric profiles 

#################################
#             Usage             #
#################################
    To run the progam, create a .ini as shown below. Navagate the terminal to the folder containing wmpl:

    Terminal:
    GetIRISData.py
    python -m supra.Fireballs.GetIRISData <location of .ini file>

    MakeIRISPicks.py
    python -m supra.Fireballs.MakeIRISPicks <location of .ini file>

    SeismicTrajectory.py
    python -m supra.Fireballs.SeismicTrajectory <location of .ini file>

    Supracenter.py
    python -m supra.Supracenter.mainmenu <location of .ini file>

    Optional Inputs:
        -h - help menu

    The .ini file should be as shown below. If the file is missing any variables, the program will return an error indicating which group of variables is missing. Example .ini files can be found in the /docs folder. GetIRISData.py and MakeIRISPicks.py use the same variables, but SeismicTrajectory only has a few variables in common. Therefore, it is recommended to use either two .ini files, one for GetIRISData.py and MakeIRISPicks.py, and the other for SeismicTrajectory.py, or, to use one large .ini file with all the variables included.

    Using weather data slows the program down. Therefore, it is recommended to do an initial search without weather, find the approximate solution, then repeat the simulation with a smaller search area, including weather, and fewer iterations.

#################################
#         Example Usage         #
#################################

    Run GetIRISData.py to see if there is any possible seismic signals in the location and time. If there are not enough stations, other stations not listed on IRIS or ORFEUS may be obtainable through their respective websites, and added through [Extra Stations]. If video or external evidence of fragmentations or the trajectory exists, they can be plotted on the graphs through [Ballistic] and [Fragmentation]. This plot can also be used as a manual search for the variables in [Ballistic] and 
    [Fragmentation] by plotting the expected arrival times over the raw, station data.

    For further analysis in the waveforms, MakeIRISPicks.py can be run off of the same .ini file used in GetIRISData.py. This will bring up the waveforms one at a time, and picks from the fireball event can be made. This GUI is intended to help identify which signals are likely arrivals and which ones are noise. Exporting the data_picks.csv file allows these to be used in SeismicTrajectory.py for ballistic arrivals, and Supracneter.py for fragmentation. It is recommended to make separate .csv files for the ballistic and each fragmentation arrival.

    From here, .csv files from fragmentation events can be used with a Supracenter.ini file (see /Supracenter/docs/User Manual Supracenter.txt for more information), and .csv files from the ballistic arrival can be used with SeismicTrajectory.py

    It is recommended to run SeismicTrajectory.py with a large search area and without weather initially. Once the variables are better known, then a smaller search with weather can be made to refine the variables. This is because simulations with weather take much longer than without.

#################################
#        .ini Variables         #
#################################
    
    INI ERROR:
    A problem with the formatting of the .ini which will restrict the program from running. The error message will say under which heading the problem is

    INI WARNING:
    A non-fatal error in the .ini file, which the user may or may not be aware of. These are meant as checks for if the program did not run as expected.

    All values should not have any quotation marks


    ###################################
                Variables
    ###################################

    ***Running the program without any variables will bring up a message which will display the required variable inputs for that part of the program. Any empty variable that is not a core variable will be set to its default value. To not use a feature, such as the manual fragmentation point search, or restricted_time, just leave the variable blank, and it will be set to a default which will turn the feature off.

    [General]
    fireball_name: [string] Name of the fireball, which will be the folder name of the working_directory. Intended to be used to distinguish between multiple fireballs in folders
    difference_filter_all: [boolean] Apply the Kalenda et al. (2014) difference filter to the plot of all waveforms
    get_data: [boolean] switch to retrive station waveform data from IRIS and ORFEUS 
    run_mode: [string] mode to run program in, see reference table below:

        |  mode  |                      Result                           |
        |--------|-------------------------------------------------------|
        | search | pso search solution                                   |
        | replot | plots data from "points_name". Used after a search    |
        | manual | plots solution with given x0, y0, t0, v, azim, zangle |

    debug: [boolean] switch to include output messages in the user about what the program is doing. Intended for finding out why the program may not be running as it should

    [Files]
    working_directory: [string] directory of all the files below.

    All of the below files should just be the file name and extension, not the directory. The final directory will be read as: working_directory/file by the program

    arrival_times_file: [string] file name of the arrival times file produced by MakeIRISPicks.py. Intended to replot past results
    sounding_file: [string] atmospheric file containing winds and temperatures
    perturbation_spread_file: [string] ensemble spread file from Copernicus (see Atmospheric section below)
    station_picks_file: [string] file name of the station picks file created by MakeIRISPicks.py.
    points_name: [string] file name of the data points produced by SeismicTrajectory.py. Intended to replot past results

    [Parameters]
    lat_centre: [float] Geo coordinates of the wave release centre, referred to as the source location
    lon_centre: [float] Geo coordinates of the wave release centre, referred to as the source location
    deg_radius: [float] Search radius to consider when looking for stations (in degrees)
    start_datetime: [datetime object] Time range of waveform retrieval (can't be more than 2 hours) YYYY-MM-DD HH:MM:SS.FFFFFF
    end_datetime:   [datetime object] Time range of waveform retrieval (can't be more than 2 hours) YYYY-MM-DD HH:MM:SS.FFFFFF
    v_sound: [float] speed of sound, used in calculating mach angle, and as the constant speed of sound if no weather data is used

    [Ballistic]
    t0: [float] time variable of the ballistic trajectory
    v: [float] velocity variable of the ballistic trajectory

    For the following variables, a trajectory will be constructed from either: 2 points, or one point and angles. The remaining data will be estimated, and output in the terminal for confirmation.

    azim: [float] azimuth variable of the ballistic trajectory, measured from North +E, in degrees
    zangle: [float] zenith variable of the ballistic trajectory, measured from the vertical, in degrees

    Latitude (deg N), longitude (deg E), and elevation (m) of the tail of the fireball
    lat_i: [float]
    lon_i: [float]
    elev_i: [float]

    Latitude (deg N), longitude (deg E), and elevation (m) of the head of the fireball
    lat_f: [float]
    lon_f: [float]
    elev_f: [float]

    show_ballistic_waveform: [Boolean] switch to show expected ballistic solution 

    [Fragmentation]
    fragmentation_point: [list] form [lat, lon, elev, t0], guess in the positions and time of fragmentations of the fireball for use with manual searches.
             example:  [[34.65, -117.55, 26500, 295], 
                        [34.70, -117.60, 24500, 297]]
    show_fragmentation_waveform: [boolean] switch to show expected fragmentation solution
    manual_fragmentation_search: [list] format lat, lon, height (in decimal degrees and meters) to find residuals of a single point, does not run a search algorithm if on. 

    [Restrictions]
    v_fixed: [float] value to restrict the speed of the meteor to
    azimuth_min: [float] minimum allowed azimuth angle, in degrees (+E of due N)
    azimuth_max: [float] maximum allowed azimuth angle, in degrees (+E of due N)
    zenith_min: [float] minimum allowed zenith angle, in degrees (from vertical)
    zenith_max: [float] maximum allowed zenith angle, in degrees (from vertical)
    x_min: [float] minimum allowed position in x, in kilometres, (+ South)
    x_max: [float] maximum allowed position in x, in kilometres, (+ South)
    y_min: [float] minimum allowed position in y, in kilometres, (+ East)
    y_max: [float] maximum allowed position in y, in kilometres, (+ East)
    t_min: [float] minimum allowed time, in seconds
    t_max: [float] maximum allowed time, in seconds
    v_min: [float] minimum allowed velocity of the fireball, in kilometres/second
    v_max: [float] maximum allowed velocity of the fireball, in kilometres/second
    max_error: [float] maximum tolerance in error. Helps the search algorithm to deal with sound waves not reaching a station, or very high errors. Assigns 'bad' points to a value so that they can be plotted, default - 1000
    restricted_time: [datetime object] format YYYY-mm-dd HH:MM:SS.ffffff (year, month, day, hour, minute, second, microsecond). Restrict time of fragmentation.
    max_time: [float] latest possible time in seconds after the reference time that will be used in the search. Sets any found value after that to the max_error.
    min_time: [float] latest possible time in seconds after the reference time that will be used in the search. Sets any found value after that to the max_error.
    traj_tol: [float] how many meters away from the trajectory the Supracenter is allowed to be
    restrict_to_trajectory: [boolean] if the Supracenter solution is bound to a trajectory solution in [Ballistic]

    weight_distance_min: [float] the distance from the first signal-receiving station where all stations before are full weight.
    weight_distance_max: [float] the distance from the first signal-receiving station where all stations after are given no weight.
    Stations between these values are given a cosine taper
    search_area: [list] format lat_min, lat_max, lon_min, lon_max (in decimal degrees) Search area to run the algorithm inside, and what weather data to use. 
    search_height: [list] format height_min, height_max (in meters), gives a height range to run the algorithm inside
    
    [Atmosphere]
    enable_winds: [Boolean] switch to enable winds in the calculation
    weather_type: [string] weather source to use:   none - no weather file (isotropic)
                                                    custom - custom file (no interp)
                                                    merra - MERRA (with interp) (~one month behind)
                                                    ecmwf - ECMWF (with interp) (~four months behind)
                                                    ukmo - UKMO (with interp) (~one day behind)
    grid_size: [float] grid size resolution of the weather profile. If unknown, leave blank
    
    [Perturbations]
    perturb: [Boolean] switch to enable perturbations
    perturb_method: [string] perturbation method to use:    bmp, sppt, temporal, spread
                                                            X is perturbed variable, x is original variable
                                                            bmp - BMP method: X = (1 + r)*x, r is a normally distributed random number r = [-0.5, 0.5]
                                                            sppt - SPPT method: X = (1 + r*u)*x, r is a random number from a Gaussian distribution with a standard deviation of 0.5/3 (for now), u is a scaling factor, u = [0, 1], u is 0 near the surface and the stratosphere, and smoothly transitions to 1 in between
                                                            temporal - uses times around the current atmosphere to guess range
                                                            spread - uses ranges from ECMWF
    perturb_times: [int] number of times to perturb the weather, in addition to the original sounding. A value of 1 will show the original weather, and one perturbation.
    fragno: [int] which fragmentation is to be looked at in Supracenter, if more than one was used in generating the arrival_times_file.npy in MakeIRISPicks.py
    
    [Speed]
    fast_ballistic: [boolean] switch to calculate the ballistic wave release points quickly (if true) or accurately (if false). True will not consider the winds, and the wave release point will be the intersection between the trajectory and a perpendicular line to the station. False will be the point on the trajectory which leaves the trajectory perpendicular, and with winds arrives at the station.
    fit_type: [int] Fit type for the error cost function in Supracenter. 1 - Evaluates the error as the absolute difference. 2 - Evaluates the error as the square of the difference
    n_theta: [int] Azimuth grid spacing for ray tracing algorithm
    n_phi: [int] Zenith grid spacing for the ray tracing algorithm
    angle_precision: [float] ray tracing algorithm angle precision. Minimum resolution between two angles
    angle_error_tol: [float] ray tracing algorithm angle error tolerance. How far off the angle can be from the "true" angle
    
    [PSO]
    maxiter: [int] maximum number of iterations allowed for the particle swarm optimization search
    swarmsize: [int] number of particles to search with in the particle swarm optimization search
    run_times: [int] number of times to run the particle swarm optimization search, the best answer is taken from all searches
    phip: [float] Scaling factor to search away from the best known position of each particle, each iteration, default - 0.5 
    phig: [float] Scaling factor to search away from the best known position of the swarm, each iteration, default - 0.5
    omega: [float] Particle velocity scaling factor, default - 0.5
    pso_debug: [boolean] Enable/disable debug mode in particle swarm optimization
    minfunc: [float] minimum change in error in pso search befire stopping, default - 1e-8
    minstep: [float] minimum tolerance in pso stepsize before stopping, default - 1e-8
    
    [Graphing]
    plot_all_stations: [boolean] plots stations in [Extra Stations]
    colortoggle: [boolean] true - uses inferno colormap for waveform data. false - uses random colors for waveform data (useful if data overlaps)
    dot_tol: [float] tolerance in finding the boundaries of the cylindrical arrival times for MakeIRISPicks contour. Higher values mean a larger area of travel times. Code takes dot product of trajectory vector and from the wave release point to a ground position. The wave will only reach the ground if these are perpendicular. dot_tol is the tolerance around 0 that the dot product of the two vectors can be to be considered at a right angle.
    contour_res: [int] Resolution of the contour plot. eg. 100 would make both x and y spacing 100, giving a 10000 square grid. Default is 100, but can be set lower to reduce computational time with weather. The size of the contour plot can be changed with deg_radius.
    high_f: [list] a list of station codes. Marks those stations green, as a fragmentation arrival. Example: high_f = ['X48A', 'Y49A', 'FPAL']
    high_b: [list] a list of station codes. Marks those stations blue, as a ballistic arrival. Example: high_b = ['X48A', 'Y49A', 'FPAL']
    rm_stat: [list] a list of station codes. Removes those stations from display. Example: rm_stat = ['X48A', 'Y49A', 'FPAL']
    img_dim: [int] resolution of contour graphs. High values with winds take a long time to compute
    reported_points: [list] format [['name 1', lat1, lon1, height1], ['name 2', lat2, lon2, height2], ...] points plotted along with the results of the search used for reference, such as points found by research.

    [Extra Stations]
    stations [list]: location and seed file of extra stations to be used. 2D list in the form:
    [["Network", "Station", latitude (deg), longitude (deg), elevation (m), "Full station name", channel, "mseed file name"], ... ]

    Example:
    stations =
        [["KO", "BNGB", 38.9913, 40.6792, 0, "KO.BNGB", "BHZ", BNGB.mseed"], ... ]
    (another example is given in the sample .ini files)  

#################################
#         Extra Stations        #
#################################

    To add a station manually, the station name, location and mseed file must be input into the .ini file. Most seismic waveform databases online will allow for an mseed file to be downloaded. The file must be put in with the rest of the mseed files, which is located in: output_folder/fireball_name

    Most data sources also allow for .kml files to be downloaded. It may be useful to compile all seismic stations into a single kml file for use with Google Earth Pro, and using the circle measure tool to find stations within 150 km of an event.

    Sites that stations can be downloaded from:

    North Carolina - http://service.ncedc.org/fdsnws/dataselect/1/
    South Carolina - https://service.scedc.caltech.edu/fdsnws/dataselect/1/
    Turkey - http://tdvm.afad.gov.tr/
    Europe - http://udim.koeri.boun.edu.tr/mseed/
    Europe - http://eida.gfz-potsdam.de/webdc3/
    IRIS - http://service.iris.edu/fdsnws/dataselect/docs/1/builder/

    Others may be found by searching for .mseed files online

#################################
#         Manual Search         #
#################################

    Green - Supracenter
    Blue  - Ballistic
    Red   - Constant Speed of Sound

    The distances marked on these graphs are the distances from the source center. This is to line up the expected times of arrival with the station waveforms. The actual arrival times and distances between each manual wave search and the stations are stated in an output file, in the same directory as the graphs. These are predicted times of arrival based off of the set speed of sound and given weather profiles.

#################################
#         Output Files          #
#################################

    GetIRISData.py
    --------------
    ### output.txt ###
    found in output_folder/fireball_name

    Variables:
        Station: [string] Station code - Station name
        Lat(deg N): [float] Latitude of the station in degrees north
        Lon(deg E): [float] Longitude of the station in degrees east
        Elev(m): [float] Elevation of the station in reference to sea level, in meters
        Az(+E dN): [float] Azimuth from the point lat_centre, lon_centre to the station, using the coordinate system increasing to the east from north

        (The following variables will be 0 if unused)
        Ball_d(km): [float] 3-D distance from the wave release point on the ballistic wave to the station
        Ball_t(s): [float] travel time of the wave from the wave release point on the ballistic wave to the station
        Frag_d(km): [float] 3-D distance from the Supracenter to the station
        Frag_t(s): [float] travel time of the wave from the Supracenter to the station

    MakeIRISPicks.py
    ----------------
    ### data_picks.csv ###
    found in output_folder/fireball_name

    Variables:
        Pick group: [int] user-defined pick group from the gui  
        Network: [string] station network
        Code: [string] station code   
        Lat: [float] station latitude in decimal degrees north
        Lon: [float] station longitude in decimal degrees east
        Elev: [float] elevation of the station in metres above sea level   
        Pick JD: [float] Julian date of the time of the pick made by the user.

    ### all_pick_times.npy ###
    found in output_folder/fireball_name

    A numpy array file containing all of the estimated arrival times calculated by the program. Contains the time for each station, perturbation, and fragmentation or ballistic arrival. Format [perturbation, station, 0-ballistic/1-frag, number of fragmentation]

    Example:
    To call the second station from the center of the third fragmentation point in an unperturbed atmosphere:
    [0, 2, 1, 3]

    To call the fifth station ballistic arrival time, for the 100th perturbation:
    [100, 5, 0, 0] 

    SeismicTrajectory.py
    --------------------
    ### _plotted_points.csv ###
    found in output_folder/fireball_name

    Used to replot graphs in SeismicTrajectory.py replot mode. Contains all of the search points used in pso. The best point is added to the bottom of the file.

    Variables:
        lat: [float] latitude of point (deg N)
        lon: [float] longitude of point (deg E)
        x0: [float] x position of point (+ South) (m)
        y0: [float] y position of point (+ East) (m)
        t0: [float] reference time of point. (s)
        v: [float] velocity of point. (m/s)
        az: [float] azimuth the fireball is coming from. (+E due N)
        ze: [float] zenith of the trajectory (from horizontal)
        err: [float] error of point
    
    ### _results.txt ###
    found in output_folder/fireball_name

    A .txt output of the station residuals for reference.

    Variables:
        Station Name: [string] Station code
        Station Location: [float] location of station
        Residual: [float] time error in station with given trajectory solution
        Travel Time: [float] time of the sound wave from the wave release point to the station
        Wave Release Point: [float] location on the trajectory where the wave is released to the station, that is, the point on the line that is perpendicular to the station.

    ### darkflight_sounding.txt ### *(1)
    found in output_folder/fireball_name

    A .txt output that is an estimate of the weather profile of the meteor, based off of the given weather data.
    If a weather profile is given, the estimated profile will be from the lowest point on the trajectory to the ground. If a weather profile is not given, a fake weather profile will be generated, which can be further edited. In both cases, the pressures at given heights are estimated by the U. S. Standard Atmosphere Model of 1976.

    Variables:
        height: [float] height of the weather (m)
        temperature: [float] temperature at the current height (deg C)
        wind speed: [float] magnitude of the speed of wind at the current height (m/s)
        wind direction: [float] direction of the wind at the current height (+E due N)
        pressure: [float] air pressure at the current height (hPa)

    ### _darkflight_input.ini ### *(1)
    found in output_folder/fireball_name

    A sample .txt output that may be used with darkflight.py as an input. It creates the variables assuming that the darkflight begins at the bottom of the trajectory, while leaving other user-defined options as blank (default values). While this file can be used immediately with darkflight.py, it is recommended that it is reviewed and edited by the user first.

    Variables:
        see User Manual Darkflight Wrapper.txt 

    *(1) depending on the network that you are running on, darkflight.c may be unavailable, and therefore, darkflight.py will not run. Darkflight.c is not part of the Western Meteor Python Library 

#################################
# Atmospheric Data Instructions #
#################################

    Note: Weather data has been tested with recent files, older files may have a different format, in which a custom script to read them is required. See netCDFconv.py for more details. 

    Reading the wrong file may cause the program to freeze, such as trying to read UKMO .nc file as an ECMWF .nc file. Killing the program while it is reading the data may corrupt the file (while the message 'Converting weather data. This may take a while...' is in the terminal).

    Constants used in converting weather values can be found in wmpl/Utils/constants.ini

    ===================================
    UKMO Instructions - Manual Download
    ===================================
    Downloadable files can be found here:
    http://data.ceda.ac.uk/badc/ukmo-assim/

    An account will need to be created in order to access files

    UKMO data is found as a .pp file on the CEDA site

    Supracenter only handles .nc files, so the file needs to be converted.

    ---CONVERT .PP TO .NC-------------------------------------------------
    Download xConv1.94 <replace 1.94 with the current version number>
    http://cms.ncas.ac.uk/documents/xconv/
    and extract xconv1.94 and convsh1.94. Create a symbolic link to convsh: 

    Terminal:
    ln -s xconv1.94 convsh1.94

    In the folder with xconv and convsh, add conv2nc.tcl and runXconv.bat from the xconv_scripts file. Other
    example scripts can be found here: http://cms.ncas.ac.uk/documents/xconv/

    After this setup, .pp files in the folder can be converted to .nc files with the command:
    (Navigate to the folder)

    Terminal:
    ./convsh1.94 ./conv2nc.tcl -i <input file.pp> -o <output file.nc>
    ----------------------------------------------------------------------

    Indicate in the .ini where the .nc file is, and the UKMO data can now be read by Supracenter

    Note: killing the program while reading a .nc file WILL corrupt the file

    Note: Data conversion may not work for older files, and may need to be read with a script

    ====================================
    ECMWF Instructions - Script Download
    ====================================
    As of August 2018 this may be outdated with Climate Change Service

    ECMWF has moved to here:
    https://cds.climate.copernicus.eu/cdsapp#!/dataset/reanalysis-era5-pressure-levels?tab=form

    Create an account with ECMWF

    Follow the instructions given:
    https://software.ecmwf.int/wiki/display/CKB/How+to+download+data+via+the+ECMWF+WebAPI

    Follow the instructions given up to before making the script, the script is in mainmenu.py:
    https://software.ecmwf.int/wiki/display/CKB/How+to+download+ERA5+data+via+the+ECMWF+Web+API

    Change the ECMWF script in mainmenu.py as needed, indicate the hour of the weather profile needed
    atm_hour is the hour that will be downloaded, if it is available.
    grid_size specifies the spatial resolution of the weather data from ECMWF 

    Note: Automatic data retrival may not work for older files

    ======================================
    MERRA-2 Instructions - Script Download
    ======================================
    Create an account: 
    https://wiki.earthdata.nasa.gov/display/EL/How+To+Register+With+Earthdata+Login

    Link the database with your account:
    https://disc.gsfc.nasa.gov/earthdata-login

    Enter your username and password into fetchMERRA.py

    Specify in the .ini where the file is and the name of the file, indicate the hour of the weather profile needed.
    atm_hour is the hour that will be downloaded, if it is available.

    Note: Automatic data retrival may not work for older files

    ======================================
    MERRA-2 Instructions - Manual Download
    ======================================
    Create an account:
    https://wiki.earthdata.nasa.gov/display/EL/How+To+Register+With+Earthdata+Login

    Link the database with your accout:
    https://disc.gsfc.nasa.gov/earthdata-login

    Download the data from the site:
    https://disc.gsfc.nasa.gov/datasets/M2I3NVASM_V5.12.4/summary?keywords=%22MERRA-2%22

    Go to "subset/get data" and specify what area data is needed. Make sure the file type is NetCDF 4
    and the variables contain at least "air_temperature", "northward_wind", "eastward_wind", and "mid_layer_heights"

    Specify in the .ini where the file is and the name of the file

    Note: Data conversion may not work for older files, and may need to be read with a script

    ==================================
    Custom Atmospheric Data
    ==================================
    Create a custom .txt file containing the data, separated by spaces.
    An example can be found in /Supracenter/docs/Sample_Custom_Sounding_Data.txt

    There must be at least two rows for the program to be able to run.

    The format of the .txt file should be:
    --------------------------------------
    *header
    elevation(m) temperature(deg C) wind_speed(m/s) wind_direction(deg from north due east)
    --------------------------------------
   
    Specify in the .ini where the file is.

    ==================================
    Isotropic Atmospheric Data
    ==================================
    No file is required for an isotropic profile.

    The v_sound variable must be set, and the program will make a custom atmospheric dataset using the given speed of sound.

#################################
#     Weather Perturbations     #
#################################

    The current BMT and SPPT methods are taken from here:
    https://www.ecmwf.int/sites/default/files/elibrary/2009/11577-stochastic-parametrization-and-model-uncertainty.pdf

    The Spread method is taken from the ECMWF, from Ensemble spread. 