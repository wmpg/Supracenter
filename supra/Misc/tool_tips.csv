fireball_name: [string] Name of the fireball, which will be the folder name of the working_directory. Intended to be used to distinguish between multiple fireballs in folders
difference_filter: [boolean] Apply the Kalenda et al. (2014) difference filter to the plot of all waveforms,
get_data: [boolean] switch to retrive station waveform data from IRIS and ORFEUS,
run_mode: [string] mode to run program in. search - pso search solution. replot - plots data from "points_name". Used after a search. manual - plots solution with given x0, y0, t0, v, azim, zangle
debug: [boolean] switch to include output messages in the user about what the program is doing. Intended for finding out why the program may not be running as it should,
working_directory: [string] directory of all the files below,
arrival_times_file: [string] file name of the arrival times file produced by MakeIRISPicks.py. Intended to replot past results,
sounding_file: [string] atmospheric file containing winds and temperatures,
perturbation_spread_file: [string] ensemble spread file from Copernicus,
station_picks_file: [string] file name of the station picks file created by MakeIRISPicks.py.,
points_name: [string] file name of the data points produced by SeismicTrajectory.py. Intended to replot past results,
lat_centre: [float] Geo coordinates of the wave release centre, referred to as the source location,
lon_centre: [float] Geo coordinates of the wave release centre, referred to as the source location,
deg_radius: [float] Search radius to consider when looking for stations (in degrees),
fireball_datetime: [datetime object] Time of the fireball ground point
v_sound: [float] speed of sound, used in calculating mach angle, and as the constant speed of sound if no weather data is used,
t0: [float] time of the fireball from top point to geometric landing point at velocity v (use as an addition to the fireball datetime in such a way that fireball datetime + t0 = time of impact)[seconds],
v: [float] velocity variable of the ballistic trajectory [meters],
azim: [float] azimuth variable of the ballistic trajectory, measured from North +E, in degrees,
zangle: [float] zenith variable of the ballistic trajectory, measured from the vertical, in degrees,
lat_i: [float] latitude (deg N) of the tail of the fireball,
lon_i: [float] longitude (deg E) of the tail of the fireball,
elev_i: [float] elevation (m) of the tail of the fireball,
lat_f: [float] latitude (deg N) of the head of the fireball,
lon_f: [float] longitude (deg E) of the head of the fireball,
elev_f: [float] elevation (m) of the head of the fireball,
show_ballistic_waveform: [Boolean] switch to show expected ballistic solution, 
fragmentation_point: [list] form [lat, lon, elev, t0], guess in the positions and time of fragmentations of the fireball for use with manual searches. ,
show_fragmentation_waveform: [boolean] switch to show expected fragmentation solution,
manual_fragmentation_search: [list] format lat, lon, height (in decimal degrees and meters) to findresiduals of a single point, does not run a search algorithm if on., 
v_fixed: [float] value to restrict the speed of the meteor to,
azimuth_min: [float] minimum allowed azimuth angle, in degrees (+E of due N),
azimuth_max: [float] maximum allowed azimuth angle, in degrees (+E of due N),
zenith_min: [float] minimum allowed zenith angle, in degrees (from vertical),
zenith_max: [float] maximum allowed zenith angle, in degrees (from vertical),
x_min: [float] minimum allowed position in x, in kilometres, (+ South),
x_max: [float] maximum allowed position in x, in kilometres, (+ South),
y_min: [float] minimum allowed position in y, in kilometres, (+ East),
y_max: [float] maximum allowed position in y, in kilometres, (+ East),
z_min: [float] minimum allowed position in z, in kilometres,
z_max: [float] maximum allowed position in z, in kilometres,
t_min: [float] minimum allowed time, in seconds,
t_max: [float] maximum allowed time, in seconds,
v_min: [float] minimum allowed velocity of the fireball, in kilometres/second,
v_max: [float] maximum allowed velocity of the fireball, in kilometres/second,
max_error: [float] maximum tolerance in error. Helps the search algorithm to deal with sound waves not reaching a station, or very high errors. Assigns bad points to a value so that they can be plotted, default - 1000,
restricted_time: [datetime object] Restrict time of fragmentation.,
max_time: [float] latest possible time in seconds after the reference time that will be used in the search. Sets any found value after that to the max_error.,
min_time: [float] latest possible time in seconds after the reference time thatwill be used in the search. Sets any found value after that to the max_error.,
traj_tol: [float] how many meters away from the trajectory the Supracenter is allowed to be,
restrict_to_trajectory: [boolean] if the Supracenter solution is bound to a trajectory solution in [Ballistic],
weight_distance_min: [float] the distance from the first signal-receiving station where all stations before are full weight.,
weight_distance_max: [float] the distance from the first signal-receiving station where all stations after are given no weight. Stations between these values are given a cosine taper
search_area: [list] format lat_min, lat_max, lon_min, lon_max (in decimal degrees) Search area to run the algorithm inside, and what weather data to use.
search_height: [list] format height_min, height_max (in meters), gives a height range to run the algorithm inside,
enable_winds: [Boolean] switch to enable winds in the calculation
weather_type: [string] weather source to use: none - no weather file (isotropic). custom - custom file (no interp). merra - MERRA (with interp) (~one month behind). ecmwf - ECMWF (with interp) (~four months behind). ukmo - UKMO (with interp) (~one day behind),
grid_size: [float] grid size resolution of the weather profile. If unknown, leave blank,
perturb: [Boolean] switch to enable perturbations,
perturb_method: [string] perturbation method to use: X is perturbed variable, x is original variable. bmp - BMP method: X = (1 + r)*x, r is a normally distributed random number r = [-0.5, 0.5]. sppt - SPPT method: X = (1 + r*u)*x, r is a random number from a Gaussian distribution with a standard deviation of 0.5/3 (for now), u is a scaling factor, u = [0, 1], u is 0 near the surface and the stratosphere, and smoothly transitions to 1 in between. temporal - uses times around the current atmosphere to guess range. spread - uses ranges from ECMWF. spread_r - used ranges from ECMWF but random numbers are generated per level,
perturb_times: [int] number of times to perturb the weather, in addition to the original sounding. A value of 1 will show the original weather, and one perturbation.,
fragno: [int] which fragmentation is to be looked at in Supracenter, if more than one was used in generating the arrival_times_file.npy in MakeIRISPicks.py,
fast_ballistic: [boolean] switch to calculate the ballistic wave release points quickly (if true) or accurately (if false). True will not consider the winds, and the wave release point will be the intersection between the trajectory and a perpendicular line to the station. False will be the point on the trajectory which leaves the trajectory perpendicular, and with winds arrives at the station.
fit_type: [int] Fit type for the error cost function in Supracenter. 1 - Evaluates the error as the absolute difference. 2 - Evaluates the error as the square of the difference.
n_theta: [int] Azimuth grid spacing for ray tracing algorithm,
n_phi: [int] Zenith grid spacing for the ray tracing algorithm,
angle_precision: [float] ray tracing algorithm angle precision. Minimum resolution between two angles,
angle_error_tol: [float] ray tracing algorithm angle error tolerance. How far off the angle can be from the "true" angle,
maxiter: [int] maximum number of iterations allowed for the particle swarm optimization search
swarmsize: [int] number of particles to search with in the particle swarm optimization search
run_times: [int] number of times to run the particle swarm optimization search, the best answer is taken from all searches,
phip: [float] Scaling factor to search away from the best known position of each particle, each iteration, default - 0.5,
phig: [float] Scaling factor to search away from the best known position of the swarm, each iteration, default - 0.5,
omega: [float] Particle velocity scaling factor, default - 0.5,
pso_debug: [boolean] Enable/disable debug mode in particle swarm optimization,
minfunc: [float] minimum change in error in pso search befire stopping, default - 1e-8,
minstep: [float] minimum tolerance in pso stepsize before stopping, default - 1e-8,
plot_all_stations: [boolean] plots stations in [Extra Stations],
colortoggle: [boolean] true - uses inferno colormap for waveform data. false - uses random colors for waveform data (useful if data overlaps),
dot_tol: [float] tolerance in finding the boundaries of the cylindrical arrival times for MakeIRISPicks contour. Higher values mean a larger area of travel times. Code takes dot product of trajectory vector and from the wave release point to a ground position. The wave will only reach the ground if these are perpendicular. dot_tol is the tolerance around 0that the dot product of the two vectors can be to be considered at a right angle.
contour_res: [int] Resolution of the contour plot. eg. 100 would make both x and y spacing 100, giving a 10000 square grid.Default is 100, but can be set lower to reduce computational time with weather. The size of the contour plot can be changed with deg_radius.
high_f: [list] a list of station codes. Marks those stations green, as a fragmentation arrival.
high_b: [list] a list of station codes. Marks those stations blue, as a ballistic arrival.,
rm_stat: [list] a list of station codes. Removes those stations from display.,
img_dim: [int] resolution of contour graphs. High values with winds take a long time to compute,
reported_points: [list] points plotted along with the results of the search used for reference, such as points found by research.,
stations: [list] location and seed file of extra stations to be used.