import numpy as np
import matplotlib.pyplot as plt


from supra.Supracenter.anglescan2 import anglescan
from mpl_toolkits.mplot3d import Axes3D

from supra.Utils.pso import pso
import multiprocessing

from timeit import default_timer as timer  


def angleErr(x, *cyscan_inputs):
    S, z_profile, D, wind, debug, h_tol, v_tol = cyscan_inputs

    r = anglescan(S, x[0], x[1], z_profile, trace=False, debug=debug, wind=wind)

    err = np.sqrt((D[0] - r[0])**2 + (D[1] - r[1])**2 + (D[2] - r[2])**2)

    return err

SWARM_SIZE = 100
MAXITER = 100
PHIP = 0.5
PHIG = 0.5
OMEGA = 0.5
MINFUNC = 1e-6
MINSTEP = 1e-6


def cyscan(S, D, z_profile, trace=False, plot=False, particle_output=False, debug=False, wind=False, h_tol=330, v_tol=3000, \
        print_times=False, processes=6):
    """
    S and D are given as xyz positions
    Results given as Time, Azimuth, Take Off, Error
    """



    # phi, theta
    search_min = [0, 90]
    search_max = [360, 180]

    cyscan_inputs = [S, z_profile, D, wind, debug, h_tol, v_tol]

    if particle_output:
        f_opt, x_opt, f_particle, x_particle = pso(angleErr, search_min, search_max, \
            args=cyscan_inputs, processes=processes, particle_output=True, swarmsize=SWARM_SIZE,\
                 maxiter=MAXITER, phip=PHIP, phig=PHIG, \
                 debug=False, omega=OMEGA, minfunc=MINFUNC, \
                 minstep=MINSTEP)

    else:
        f_opt, x_opt = pso(angleErr, search_min, search_max, \
            args=cyscan_inputs, processes=processes, particle_output=False, swarmsize=SWARM_SIZE,\
                 maxiter=MAXITER, phip=PHIP, phig=PHIG, \
                 debug=False, omega=OMEGA, minfunc=MINFUNC, \
                 minstep=MINSTEP)


    if trace:
        r = anglescan(S, f_opt[0], f_opt[1], z_profile, trace=True)
        tr = np.array(r[1])

        if plot:
            
            fig = plt.figure()
            ax = Axes3D(fig)
            ax.scatter(S[0]/1000, S[1]/1000, S[2]/1000, c='r', marker='*')
            ax.scatter(D[0]/1000, D[1]/1000, D[2]/1000, c='g', marker='^')
            ax.scatter(tr[:, 0]/1000, tr[:, 1]/1000, tr[:, 2]/1000, c='b')
            ax.plot(tr[:, 0]/1000, tr[:, 1]/1000, tr[:, 2]/1000, c='k')

            # Plot all missed angles
            if particle_output:
                for particle in range(len(f_particle)):
                    r = anglescan(S, f_particle[particle][0], f_particle[particle][1], z_profile, trace=True)
                    tr = np.array(r[1])
                    ax.plot(tr[:, 0]/1000, tr[:, 1]/1000, tr[:, 2]/1000, alpha=0.3)

            ax.set_xlabel("Horizontal Distance E [km]")
            ax.set_ylabel("Horizontal Distance N [km]")
            ax.set_zlabel("Vertical Distance [km]")
            ax.set_title("Ray-Tracing from {:} to {:}".format(S, D))
            ax.axes.set_xlim3d(left=0, right=2) 
            ax.axes.set_ylim3d(bottom=0, top=15) 
            ax.axes.set_zlim3d(bottom=0, top=80)
            plt.show()
    else:
        r = anglescan(S, f_opt[0], f_opt[1], z_profile, trace=False)


    if debug:
        print("Final Solution: {:.2f} {:.2f}".format(f_opt[0], f_opt[1]))
        print("Final Error:    {:.2f}".format(x_opt))
        if trace:
            phi_list = []
            the_list = []
            for i in range(len(tr[:, 2]) - 1):
                f_v = np.abs(tr[i+1, 2] - tr[i, 2])
                f_h = np.sqrt((tr[i+1, 0] - tr[i, 0])**2 + (tr[i+1, 1] - tr[i, 1])**2)
                f_x = tr[i+1, 0] - tr[i, 0]
                f_y = tr[i+1, 1] - tr[i, 1]
                tr_phi = np.degrees(np.arctan2(f_x, f_y))
                tr_theta = np.degrees(np.arctan2(f_v, f_h)) + 90
                phi_list.append(tr_phi)
                the_list.append(tr_theta)
                if i == 0:
                    # Note that the trace solution may not equal the actual solution if there are winds
                    print("Trace Solution: {:.2f} {:.2f}".format(tr_phi, tr_theta))
            print("Mean Angles: {:.2f} {:.2f}".format(np.nanmean(phi_list), np.nanmean(the_list)))
    
    if trace:
        x, y, z, T = r[0]
    else:
        x, y, z, T = r

    # if print_times:
    #     alltimes = []
    #     for particle in range(len(f_particle)):
    #         r = anglescan(S, f_particle[particle][0], f_particle[particle][1], z_profile, trace=False)
    #         x_t, y_t, z, T = r
    #         h_err = np.sqrt((D[0] - x)**2 + (D[1] - y)**2)
    #         v_err = np.sqrt(D[2] - z)
    #         if h_err <= h_tol and v_err <= v_tol:
    #             alltimes.append(T)

    #     if len(alltimes) == 0:
    #         print("No times within error!")
    #     else:
    #         print("Times:")
    #         print("Minimum Time: {:.4f} s".format(np.nanmin(alltimes)))
    #         print("Maximum Time: {:.4f} s".format(np.nanmax(alltimes)))
    #         print("Time of Minimum Error: {:.4f} s".format(T))


    h_err = np.sqrt((x - D[0])**2 + (y - D[1])**2)
    v_err = np.abs(z - D[2])

    if h_err <= h_tol and v_err <= v_tol:

        # Good Arrival
        R = [T, f_opt[0], f_opt[1], x_opt]



    else:
        R = [np.nan, np.nan, np.nan, x_opt]
        tr = [[np.nan, np.nan, np.nan, np.nan]]

    if trace:
        if particle_output:
            return R, tr, f_particle 
        return R, tr
    else:
        if particle_output:
            return R, f_particle
        return R


if __name__ == '__main__':
  
    S = np.array([0, 0, 80000])

    #takeoff
    theta = 135

    #azimuth
    phi = 0
    def sampleData():
      z_profile = np.array([[ 0.00000000e+00,  3.42743569e+02,  3.50706792e+00,  1.21708086e+00,
       1.00000000e+05],
     [ 8.00966680e+02,  3.40891099e+02,  8.71386288e+00,  1.34437648e+00,
       9.10869144e+04],
     [ 1.60193336e+03,  3.37024908e+02,  9.36274861e+00,  1.52621869e+00,
       8.28106917e+04],
     [ 2.40290004e+03,  3.33319821e+02,  1.05088599e+01,  1.62793858e+00,
       7.51166474e+04],
     [ 3.20386672e+03,  3.30545545e+02,  9.94881815e+00,  1.48315116e+00,
       6.79948248e+04],
     [ 4.00483340e+03,  3.27499491e+02,  1.37783464e+01,  1.33401569e+00,
       6.14431535e+04],
     [ 4.80580008e+03,  3.25124188e+02,  1.93783601e+01,  1.16914399e+00,
       5.54162206e+04],
     [ 5.60676676e+03,  3.23072121e+02,  2.41096109e+01,  1.14041472e+00,
       4.99114836e+04],
     [ 6.40773344e+03,  3.20445509e+02,  3.36827080e+01,  1.20166095e+00,
       4.48875550e+04],
     [ 7.20870012e+03,  3.17135294e+02,  3.62861319e+01,  1.22948915e+00,
       4.02812096e+04],
     [ 8.00966680e+03,  3.13900959e+02,  3.50089244e+01,  1.18666063e+00,
       3.60752555e+04],
     [ 8.81063348e+03,  3.09957254e+02,  3.44799098e+01,  1.17323831e+00,
       3.22215152e+04],
     [ 9.61160016e+03,  3.05748989e+02,  3.71389382e+01,  1.18259587e+00,
       2.86895901e+04],
     [ 1.04125668e+04,  3.02160844e+02,  4.11107032e+01,  1.17084621e+00,
       2.54693835e+04],
     [ 1.12135335e+04,  2.99343311e+02,  4.09280423e+01,  1.15093482e+00,
       2.25535042e+04],
     [ 1.20145002e+04,  2.97353403e+02,  3.89583426e+01,  1.12396516e+00,
       1.99301763e+04],
     [ 1.28154669e+04,  2.96116924e+02,  3.59151124e+01,  1.11244274e+00,
       1.75894360e+04],
     [ 1.36164336e+04,  2.97037676e+02,  3.38110470e+01,  1.16634608e+00,
       1.55209372e+04],
     [ 1.44174002e+04,  2.96704995e+02,  2.72732992e+01,  1.14693782e+00,
       1.36993666e+04],
     [ 1.52183669e+04,  2.95461774e+02,  2.00691667e+01,  1.01865043e+00,
       1.20875347e+04],
     [ 1.60193336e+04,  2.95264557e+02,  1.73560829e+01,  8.90817673e-01,
       1.06545351e+04],
     [ 1.68203003e+04,  2.95522945e+02,  1.49017596e+01,  9.63678915e-01,
       9.38884091e+03],
     [ 1.76212670e+04,  2.95759887e+02,  1.08382454e+01,  1.21756964e+00,
       8.27621943e+03],
     [ 1.84222336e+04,  2.95894227e+02,  6.71341892e+00,  1.40140359e+00,
       7.29758909e+03],
     [ 1.92232003e+04,  2.95875279e+02,  4.10409484e+00,  1.27424782e+00,
       6.43411063e+03],
     [ 2.00241670e+04,  2.95804050e+02,  3.20031654e+00,  8.28687906e-01,
       5.67217832e+03],
     [ 2.08251337e+04,  2.95878767e+02,  3.30333144e+00,  2.06973875e-01,
       5.00154071e+03],
     [ 2.16261003e+04,  2.96255504e+02,  3.79486702e+00, -4.56493935e-01,
       4.41224991e+03],
     [ 2.24270670e+04,  2.96914056e+02,  4.43958057e+00, -1.06881884e+00,
       3.89536007e+03],
     [ 2.32280337e+04,  2.97789825e+02,  5.09856867e+00, -1.54755667e+00,
       3.44217772e+03],
     [ 2.40290004e+04,  2.98818213e+02,  5.63292791e+00, -1.81026327e+00,
       3.04400938e+03],
     [ 2.48299671e+04,  2.99932733e+02,  5.94722242e+00, -1.79905992e+00,
       2.69264015e+03],
     [ 2.56309337e+04,  3.01056086e+02,  6.19496130e+00, -1.59675767e+00,
       2.38259619e+03],
     [ 2.64319004e+04,  3.02107128e+02,  6.61812379e+00, -1.33616596e+00,
       2.10937774e+03],
     [ 2.72328671e+04,  3.03009424e+02,  7.44439303e+00, -1.14540898e+00,
       1.86853154e+03],
     [ 2.80338338e+04,  3.03769045e+02,  8.64917160e+00, -1.06948952e+00,
       1.65639857e+03],
     [ 2.88348005e+04,  3.04462359e+02,  9.99293825e+00, -1.08259728e+00,
       1.46999638e+03],
     [ 2.96357671e+04,  3.05167979e+02,  1.12293010e+01, -1.15665821e+00,
       1.30636417e+03],
     [ 3.04367338e+04,  3.05964517e+02,  1.21118679e+01, -1.26359825e+00,
       1.16254115e+03],
     [ 3.12377005e+04,  3.06930588e+02,  1.23942470e+01, -1.37534333e+00,
       1.03556652e+03],
     [ 3.20386672e+04,  3.08127737e+02,  1.18851278e+01, -1.46622073e+00,
       9.22592884e+02],
     [ 3.28396339e+04,  3.09439600e+02,  1.09673328e+01, -1.53558750e+00,
       8.21955113e+02],
     [ 3.36406005e+04,  3.10644080e+02,  1.03649077e+01, -1.59767664e+00,
       7.32690701e+02],
     [ 3.44415672e+04,  3.11534921e+02,  1.07547880e+01, -1.66598429e+00,
       6.53825827e+02],
     [ 3.52425339e+04,  3.12163235e+02,  1.20432170e+01, -1.74007076e+00,
       5.84079099e+02],
     [ 3.60435006e+04,  3.12777970e+02,  1.35440188e+01, -1.80878406e+00,
       5.21932698e+02],
     [ 3.68444673e+04,  3.13620334e+02,  1.45939194e+01, -1.86109320e+00,
       4.65931632e+02],
     [ 3.76454339e+04,  3.14754327e+02,  1.50565342e+01, -1.89143995e+00,
       4.15573807e+02],
     [ 3.84464006e+04,  3.16114578e+02,  1.51801216e+01, -1.89826131e+00,
       3.71052768e+02],
     [ 3.92473673e+04,  3.17632770e+02,  1.52216964e+01, -1.88008525e+00,
       3.32577895e+02],
     [ 4.00483340e+04,  3.19240588e+02,  1.54382732e+01, -1.83543972e+00,
       3.00358570e+02],
     [ 4.08493007e+04,  3.20852351e+02,  1.59945255e+01, -1.76644667e+00,
       2.73935086e+02],
     [ 4.16502673e+04,  3.22310292e+02,  1.66717944e+01, -1.69014775e+00,
       2.50070172e+02],
     [ 4.24512340e+04,  3.23437938e+02,  1.71519648e+01, -1.62745548e+00,
       2.24805917e+02],
     [ 4.32522007e+04,  3.24059199e+02,  1.71175322e+01, -1.59925112e+00,
       1.94193063e+02],
     [ 4.40531674e+04,  3.24116639e+02,  1.64422267e+01, -1.61660986e+00,
       1.56992428e+02],
     [ 4.48541341e+04,  3.23839434e+02,  1.54616873e+01, -1.66692142e+00,
       1.18510740e+02],
     [ 4.56551007e+04,  3.23499172e+02,  1.45799056e+01, -1.73407053e+00,
       8.50233905e+01],
     [ 4.64560674e+04,  3.23367438e+02,  1.42008730e+01, -1.80194196e+00,
       6.28057670e+01],
     [ 4.72570341e+04,  3.23715819e+02,  1.47285813e+01, -1.85442045e+00,
       5.81332586e+01],
     [ 4.80580008e+04,  3.24815904e+02,  1.65670220e+01, -1.87539074e+00,
       7.72812542e+01],
     [ 4.88589675e+04,  3.26914025e+02,  2.00836783e+01, -1.84965729e+00,
       1.25855575e+02],
     [ 4.96599341e+04,  3.29530798e+02,  2.45968226e+01, -1.78845571e+00,
       1.90219434e+02],
     [ 5.04609008e+04,  3.31370113e+02,  2.82439495e+01, -1.73276712e+00,
       2.35080483e+02],
     [ 5.12618675e+04,  3.31442211e+02,  2.95912167e+01, -1.71514252e+00,
       2.33723121e+02],
     [ 5.20628342e+04,  3.30346142e+02,  2.94371424e+01, -1.72265197e+00,
       2.03620358e+02],
     [ 5.28638009e+04,  3.29110027e+02,  2.91839531e+01, -1.72999442e+00,
       1.74161076e+02],
     [ 5.36647675e+04,  3.28157845e+02,  2.94084768e+01, -1.72669293e+00,
       1.57440667e+02],
     [ 5.44657342e+04,  3.27244279e+02,  2.97731239e+01, -1.71869357e+00,
       1.46396015e+02],
     [ 5.52667009e+04,  3.26144125e+02,  2.99660602e+01, -1.71152069e+00,
       1.34445470e+02],
     [ 5.60676676e+04,  3.24876831e+02,  3.00020255e+01, -1.70501550e+00,
       1.21590379e+02],
     [ 5.68686343e+04,  3.23528437e+02,  2.99845395e+01, -1.69747350e+00,
       1.09627778e+02],
     [ 5.76696009e+04,  3.22142280e+02,  2.99572199e+01, -1.68821366e+00,
       9.93115915e+01],
     [ 5.84705676e+04,  3.20715126e+02,  2.98983579e+01, -1.67767109e+00,
       9.02581768e+01],
     [ 5.92715343e+04,  3.19244902e+02,  2.97872880e+01, -1.66627830e+00,
       8.20826370e+01],
     [ 6.00725010e+04,  3.17744923e+02,  2.96223770e+01, -1.65420937e+00,
       7.46464818e+01],
     [ 6.08734676e+04,  3.16232572e+02,  2.94069285e+01, -1.64157095e+00,
       6.78791042e+01],
     [ 6.16744343e+04,  3.14721431e+02,  2.91371190e+01, -1.62855607e+00,
       6.17217565e+01],
     [ 6.24754010e+04,  3.13221007e+02,  2.88014741e+01, -1.61545050e+00,
       5.61284183e+01],
     [ 6.32763677e+04,  3.11740635e+02,  2.83875779e+01, -1.60251124e+00,
       5.10401637e+01],
     [ 6.40773344e+04,  3.10289776e+02,  2.78805837e+01, -1.58985193e+00,
       4.63398720e+01],
     [ 6.48783010e+04,  3.08877897e+02,  2.72650795e+01, -1.57756531e+00,
       4.19007084e+01],
     [ 6.56792677e+04,  3.07513859e+02,  2.65278921e+01, -1.56619333e+00,
       3.77466871e+01],
     [ 6.64802344e+04,  3.06205876e+02,  2.56582143e+01, -1.55675264e+00,
       3.40612171e+01],
     [ 6.72812011e+04,  3.04961791e+02,  2.46483092e+01, -1.54972233e+00,
       3.09663838e+01],
     [ 6.80821678e+04,  3.03788024e+02,  2.35029301e+01, -1.54321534e+00,
       2.82930298e+01],
     [ 6.88831344e+04,  3.02690705e+02,  2.22296568e+01, -1.53498747e+00,
       2.58002243e+01],
     [ 6.96841011e+04,  3.01678194e+02,  2.08244586e+01, -1.52940335e+00,
       2.33730604e+01],
     [ 7.04850678e+04,  3.00761171e+02,  1.92712279e+01, -1.53770176e+00,
       2.10277148e+01],
     [ 7.12860345e+04,  2.99947273e+02,  1.75612701e+01, -1.56341727e+00,
       1.88081049e+01],
     [ 7.20870012e+04,  2.99231067e+02,  1.57189704e+01, -1.57680201e+00,
       1.68478552e+01],
     [ 7.28879678e+04,  2.98603470e+02,  1.37748217e+01, -1.54343437e+00,
       1.52955350e+01],
     [ 7.36889345e+04,  2.98049043e+02,  1.17000753e+01, -1.52380873e+00,
       1.41002398e+01],
     [ 7.44899012e+04,  2.97545845e+02,  9.40532598e+00, -1.67560351e+00,
       1.30068256e+01],
     [ 7.52908679e+04,  2.97074743e+02,  6.90885689e+00, -2.05761609e+00,
       1.18154309e+01],
     [ 7.60918346e+04,  2.96629247e+02,  4.67877806e+00, -2.30794314e+00,
       1.05890910e+01],
     [ 7.68928012e+04,  2.96206084e+02,  3.29771056e+00, -1.95758486e+00,
       9.45776586e+00],
     [ 7.76937679e+04,  2.95801981e+02,  3.34827547e+00, -5.37541425e-01,
       8.55141553e+00],
     [ 7.84947346e+04,  2.95413667e+02,  5.41309386e+00,  2.42118699e+00,
       8.00000000e+00],
     [ 8.00000000e+04,  2.95413667e+02,  5.41309386e+00,  2.42118699e+00,
       8.00000000e+00]])
      return z_profile

    z_profile = sampleData()
    D = ([1000, 10000, 0])

    start = timer()    
    r = cyscan(S, D, z_profile, trace=True, plot=False, particle_output=False)
    print("without GPU:", timer()-start)
