import numpy as np
import matplotlib.pyplot as plt

from dev.output import getO

from wmpl.PythonNRLMSISE00.nrlmsise_00_header import *
from wmpl.PythonNRLMSISE00.nrlmsise_00 import *
from wmpl.Utils.TrajConversions import jd2Date, jd2LST

from wmpl.MetSim.MetSimErosionCyTools import *
from wmpl.Utils.PecinaCeplechaFunction import *

import pyximport
pyximport.install(setup_args={'include_dirs':[np.get_include()]})

def getAtmDensity(lat, lon, height, jd):
    """ For the given heights, returns the atmospheric density from NRLMSISE-00 model. 
    
    More info: https://github.com/magnific0/nrlmsise-00/blob/master/nrlmsise-00.h
    Arguments:
        lat: [float] Latitude in radians.
        lon: [float] Longitude in radians.
        height: [float] Height in meters.
        jd: [float] Julian date.
    Return:
        [float] Atmosphere density in kg/m^3.
    """


    # Init the input array
    inp = nrlmsise_input()

    # Convert the given Julian date to datetime
    dt = jd2Date(jd, dt_obj=True)

    # Get the day of year
    doy = dt.timetuple().tm_yday

    # Get the second in day
    midnight = dt.replace(hour=0, minute=0, second=0, microsecond=0)
    sec = (dt - midnight).seconds

    # Calculate the Local sidreal time (degrees)
    lst, _ = jd2LST(jd, np.degrees(lon))


    ### INPUT PARAMETERS ###
    ##########################################################################################################
    # Set year (no effect)
    inp.year = 0

    # Day of year
    inp.doy = doy

    # Seconds in a day
    inp.sec = sec

    # Altitude in kilometers
    inp.alt = height/1000.0

    # Geodetic latitude (deg)
    inp.g_lat = np.degrees(lat)

    # Geodetic longitude (deg)
    inp.g_long = np.degrees(lon)

    # Local apparent solar time (hours)
    inp.lst = lst/15


    # f107, f107A, and ap effects are neither large nor well established below 80 km and these parameters 
    # should be set to 150., 150., and 4. respectively.

    # 81 day average of 10.7 cm radio flux (centered on DOY)
    inp.f107A = 150

    # Daily 10.7 cm radio flux for previous day
    inp.f107 = 150

    # Magnetic index (daily)
    inp.ap = 4

    ##########################################################################################################


    # Init the flags array
    flags = nrlmsise_flags()

    # Set output in kilograms and meters
    flags.switches[0] = 1

    # Set all switches to ON
    for i in range(1, 24):
        flags.switches[i] = 1

    
    # Array containing the following magnetic values:
    #   0 : daily AP
    #   1 : 3 hr AP index for current time
    #   2 : 3 hr AP index for 3 hrs before current time
    #   3 : 3 hr AP index for 6 hrs before current time
    #   4 : 3 hr AP index for 9 hrs before current time
    #   5 : Average of eight 3 hr AP indicies from 12 to 33 hrs prior to current time
    #   6 : Average of eight 3 hr AP indicies from 36 to 57 hrs prior to current time 
    aph = ap_array()

    # Set all AP indices to 100
    for i in range(7):
        aph.a[i] = 100


    # Init the output array
    # OUTPUT VARIABLES:
    #     d[0] - HE NUMBER DENSITY(CM-3)
    #     d[1] - O NUMBER DENSITY(CM-3)
    #     d[2] - N2 NUMBER DENSITY(CM-3)
    #     d[3] - O2 NUMBER DENSITY(CM-3)
    #     d[4] - AR NUMBER DENSITY(CM-3)                       
    #     d[5] - TOTAL MASS DENSITY(GM/CM3) [includes d[8] in td7d]
    #     d[6] - H NUMBER DENSITY(CM-3)
    #     d[7] - N NUMBER DENSITY(CM-3)
    #     d[8] - Anomalous oxygen NUMBER DENSITY(CM-3)
    #     t[0] - EXOSPHERIC TEMPERATURE
    #     t[1] - TEMPERATURE AT ALT
    out = nrlmsise_output()


    # Evaluate the atmosphere with the given parameters
    gtd7(inp, flags, out)


    # Get the total mass density
    atm_density = out.d[5]

    return atm_density

def atmDensityPoly(ht, dens_co):
    """ Calculates the atmospheric density in kg/m^3. 
    
    Arguments:
        ht: [double] Height in meters.
        dens_co: [ndarray] Array of 7th order poly coeffs.
    Return:
        [double] Atmosphere density at height h (kg/m^3)
    """

    return 10**(dens_co[0] 
               + dens_co[1]*(ht/1e6) 
               + dens_co[2]*(ht/1e6)**2 
               + dens_co[3]*(ht/1e6)**3 
               + dens_co[4]*(ht/1e6)**4 
               + dens_co[5]*(ht/1e6)**5
               + dens_co[6]*(ht/1e6)**6
               )

def massLoss(K, sigma, m, rho_atm, v):
    """ Mass loss differential equation, the result is giving dm/dt.
    Arguments:
        K: [double] Shape-density coefficient (m^2/kg^(2/3)).
        sigma: [double] Ablation coefficient (s^2/m^2).
        m: [double] Mass (kg).
        rho_atm: [double] Atmosphere density (kg/m^3).
        v: [double] Velocity (m/s).
    Return:
        dm/dt: [double] Mass loss in kg/s.
    """

    return -K*sigma*m**(2/3.0)*rho_atm*v**3

def deceleration(K, m, rho_atm, v):
    """ Computes the deceleration derivative.     
    Arguments:
        K: [double] Shape-density coefficient (m^2/kg^(2/3)).
        m: [double] Mass (kg).
        rho_atm: [double] Atmosphere density (kg/m^3).
        v: [double] Velocity (m/S).
    Return:
        dv/dt: [double] Deceleration.
    """

    return -K*m**(-1/3.0)*rho_atm*v**2

def curve():
	return np.array([[-2.0001,78.502,0],
	[-1.9951,78.402,0.146627919],
	[-1.9901,78.302,0.293255837],
	[-1.9851,78.202,0.439883756],
	[-1.9801,78.102,0.586511674],
	[-1.9751,78.002,0.733139593],
	[-1.9701,77.902,0.879767511],
	[-1.9651,77.802,1.02639543],
	[-1.9601,77.702,1.173023349],
	[-1.9551,77.602,1.319651267],
	[-1.9501,77.502,1.466279186],
	[-1.9451,77.402,1.612907104],
	[-1.9401,77.302,1.759535023],
	[-1.935,77.2,1.9090955],
	[-1.93,77.1,2.055723418],
	[-1.925,77,2.202351337],
	[-1.92,76.9,2.348979255],
	[-1.915,76.8,2.495607174],
	[-1.91,76.7,2.642235093],
	[-1.905,76.6,2.788863011],
	[-1.9,76.5,2.93549093],
	[-1.895,76.4,3.082118848],
	[-1.89,76.3,3.228746767],
	[-1.885,76.2,3.375374685],
	[-1.88,76.1,3.522002604],
	[-1.875,76,3.668630522],
	[-1.87,75.9,3.815258441],
	[-1.865,75.8,3.96188636],
	[-1.86,75.7,4.108514278],
	[-1.855,75.6,4.255142197],
	[-1.85,75.5,4.401770115],
	[-1.845,75.4,4.548398034],
	[-1.84,75.3,4.695025952],
	[-1.835,75.2,4.841653871],
	[-1.83,75.1,4.98828179],
	[-1.825,75,5.134909708],
	[-1.82,74.9,5.281537627],
	[-1.815,74.8,5.428165545],
	[-1.81,74.7,5.574793464],
	[-1.805,74.6,5.721421382],
	[-1.8,74.5,5.868049301],
	[-1.795,74.4,6.014677219],
	[-1.79,74.3,6.161305138],
	[-1.785,74.2,6.307933057],
	[-1.78,74.1,6.454560975],
	[-1.775,74,6.601188894],
	[-1.77,73.9,6.747816812],
	[-1.765,73.8,6.894444731],
	[-1.76,73.7,7.041072649],
	[-1.755,73.6,7.187700568],
	[-1.75,73.5,7.334328487],
	[-1.745,73.4,7.480956405],
	[-1.74,73.3,7.627584324],
	[-1.735,73.2,7.774212242],
	[-1.73,73.1,7.920840161],
	[-1.725,73,8.067468079],
	[-1.72,72.9,8.214095998],
	[-1.715,72.8,8.360723917],
	[-1.71,72.7,8.507351835],
	[-1.705,72.6,8.653979754],
	[-1.7,72.5,8.800607672],
	[-1.695,72.4,8.947235591],
	[-1.69,72.3,9.093863509],
	[-1.685,72.2,9.240491428],
	[-1.68,72.1,9.387119346],
	[-1.675,72,9.533747265],
	[-1.67,71.9,9.680375184],
	[-1.665,71.8,9.827003102],
	[-1.66,71.7,9.973631021],
	[-1.655,71.6,10.12025894],
	[-1.65,71.5,10.26688686],
	[-1.645,71.4,10.41351478],
	[-1.64,71.3,10.56014269],
	[-1.635,71.2,10.70677061],
	[-1.63,71.1,10.85339853],
	[-1.625,71,11.00002645],
	[-1.62,70.9,11.14665437],
	[-1.615,70.8,11.29328229],
	[-1.61,70.7,11.43991021],
	[-1.605,70.6,11.58653812],
	[-1.6,70.5,11.73316604],
	[-1.595,70.4,11.87979396],
	[-1.59,70.3,12.02642188],
	[-1.585,70.2,12.1730498],
	[-1.58,70.1,12.31967772],
	[-1.575,70,12.46630564],
	[-1.57,69.9,12.61293355],
	[-1.565,69.8,12.75956147],
	[-1.56,69.7,12.90618939],
	[-1.555,69.6,13.05281731],
	[-1.55,69.5,13.19944523],
	[-1.545,69.4,13.34607315],
	[-1.54,69.3,13.49270107],
	[-1.535,69.2,13.63932898],
	[-1.53,69.1,13.7859569],
	[-1.525,69,13.93258482],
	[-1.52,68.9,14.07921274],
	[-1.515,68.8,14.22584066],
	[-1.51,68.7,14.37246858],
	[-1.505,68.6,14.5190965],
	[-1.5,68.5,14.66572441],
	[-1.495,68.4,14.81235233],
	[-1.49,68.3,14.95898025],
	[-1.485,68.2,15.10560817],
	[-1.48,68.1,15.25223609],
	[-1.475,68,15.39886401],
	[-1.47,67.9,15.54549193],
	[-1.465,67.8,15.69211984],
	[-1.46,67.7,15.83874776],
	[-1.455,67.6,15.98537568],
	[-1.45,67.5,16.1320036],
	[-1.445,67.4,16.27863152],
	[-1.44,67.3,16.42525944],
	[-1.435,67.2,16.57188736],
	[-1.43,67.1,16.71851527],
	[-1.425,67,16.86514319],
	[-1.42,66.9,17.01177111],
	[-1.415,66.8,17.15839903],
	[-1.41,66.7,17.30502695],
	[-1.405,66.6,17.45165487],
	[-1.4,66.5,17.59828279],
	[-1.395,66.4,17.7449107],
	[-1.39,66.3,17.89153862],
	[-1.385,66.2,18.03816654],
	[-1.38,66.1,18.18479446],
	[-1.375,66,18.33142238],
	[-1.37,65.9,18.4780503],
	[-1.365,65.8,18.62467822],
	[-1.36,65.7,18.77130613],
	[-1.355,65.6,18.91793405],
	[-1.35,65.5,19.06456197],
	[-1.345,65.4,19.21118989],
	[-1.34,65.3,19.35781781],
	[-1.335,65.2,19.50444573],
	[-1.33,65.1,19.65107365],
	[-1.325,65,19.79770156],
	[-1.32,64.9,19.94432948],
	[-1.315,64.8,20.0909574],
	[-1.31,64.7,20.23758532],
	[-1.305,64.6,20.38421324],
	[-1.3,64.5,20.53084116],
	[-1.295,64.4,20.67746908],
	[-1.29,64.3,20.82409699],
	[-1.285,64.2,20.97072491],
	[-1.28,64.1,21.11735283],
	[-1.275,64,21.26398075],
	[-1.27,63.9,21.41060867],
	[-1.265,63.8,21.55723659],
	[-1.26,63.7,21.70386451],
	[-1.255,63.6,21.85049242],
	[-1.25,63.5,21.99712034],
	[-1.245,63.4,22.14374826],
	[-1.24,63.3,22.29037618],
	[-1.235,63.2,22.4370041],
	[-1.23,63.1,22.58363202],
	[-1.225,63,22.73025994],
	[-1.22,62.9,22.87688785],
	[-1.215,62.8,23.02351577],
	[-1.21,62.7,23.17014369],
	[-1.205,62.6,23.31677161],
	[-1.2,62.5,23.46339953],
	[-1.195,62.4,23.61002745],
	[-1.19,62.3,23.75665537],
	[-1.185,62.2,23.90328328],
	[-1.18,62.1,24.0499112],
	[-1.175,62,24.19653912],
	[-1.17,61.9,24.34316704],
	[-1.165,61.8,24.48979496],
	[-1.16,61.7,24.63642288],
	[-1.155,61.6,24.7830508],
	[-1.15,61.5,24.92967871],
	[-1.145,61.4,25.07630663],
	[-1.14,61.3,25.22293455],
	[-1.135,61.2,25.36956247],
	[-1.13,61.1,25.51619039],
	[-1.125,61,25.66281831],
	[-1.12,60.9,25.80944623],
	[-1.115,60.8,25.95607414],
	[-1.11,60.7,26.10270206],
	[-1.105,60.6,26.24932998],
	[-1.1,60.5,26.3959579],
	[-1.095,60.4,26.54258582],
	[-1.09,60.3,26.68921374],
	[-1.085,60.2,26.83584166],
	[-1.08,60.1,26.98246957],
	[-1.075,60,27.12909749],
	[-1.07,59.9,27.27572541],
	[-1.065,59.8,27.42235333],
	[-1.06,59.7,27.56898125],
	[-1.055,59.6,27.71560917],
	[-1.05,59.5,27.86223709],
	[-1.045,59.4,28.008865],
	[-1.04,59.3,28.15549292],
	[-1.035,59.2,28.30212084],
	[-1.03,59.1,28.44874876],
	[-1.025,59,28.59537668],
	[-1.02,58.9,28.7420046],
	[-1.015,58.8,28.88863252],
	[-1.01,58.7,29.03526043],
	[-1.005,58.6,29.18188835],
	[-1,58.5,29.32851627],
	[-0.995,58.4,29.47514419],
	[-0.99,58.3,29.62177211],
	[-0.985,58.2,29.76840003],
	[-0.98,58.1,29.91502795],
	[-0.975,58,30.06165586],
	[-0.97,57.9,30.20828378],
	[-0.965,57.8,30.3549117],
	[-0.96,57.7,30.50153962],
	[-0.955,57.6,30.64816754],
	[-0.95,57.5,30.79479546],
	[-0.945,57.4,30.94142338],
	[-0.94,57.3,31.08805129],
	[-0.935,57.2,31.23467921],
	[-0.93,57.1,31.38130713],
	[-0.925,57,31.52793505],
	[-0.92,56.9,31.67456297],
	[-0.915,56.8,31.82119089],
	[-0.91,56.7,31.96781881],
	[-0.905,56.6,32.11444672],
	[-0.9,56.5,32.26107464],
	[-0.895,56.4,32.40770256],
	[-0.89,56.3,32.55433048],
	[-0.885,56.2,32.7009584],
	[-0.88,56.1,32.84758632],
	[-0.875,56,32.99421424],
	[-0.87,55.9,33.14084215],
	[-0.865,55.8,33.28747007],
	[-0.86,55.7,33.43409799],
	[-0.855,55.6,33.58072591],
	[-0.85,55.5,33.72735383],
	[-0.845,55.4,33.87398175],
	[-0.84,55.3,34.02060967],
	[-0.835,55.2,34.16723758],
	[-0.83,55.1,34.3138655],
	[-0.825,55,34.46049342],
	[-0.82,54.9,34.60712134],
	[-0.815,54.8,34.75374926],
	[-0.81,54.7,34.90037718],
	[-0.805,54.6,35.0470051],
	[-0.8,54.5,35.19363301],
	[-0.795,54.4,35.34026093],
	[-0.79,54.3,35.48688885],
	[-0.785,54.2,35.63351677],
	[-0.78,54.1,35.78014469],
	[-0.7749,53.998,35.92970516],
	[-0.7699,53.898,36.07633308],
	[-0.7649,53.798,36.222961],
	[-0.7599,53.698,36.36958892],
	[-0.7549,53.598,36.51621684],
	[-0.7499,53.498,36.66284476],
	[-0.7449,53.398,36.80947268],
	[-0.7399,53.298,36.95610059],
	[-0.7349,53.198,37.10272851],
	[-0.7299,53.098,37.24935643],
	[-0.7249,52.998,37.39598435],
	[-0.7199,52.898,37.54261227],
	[-0.7149,52.798,37.68924019],
	[-0.71,52.7,37.83293555],
	[-0.705,52.6,37.97956347],
	[-0.7,52.5,38.12619139],
	[-0.695,52.4,38.2728193],
	[-0.69,52.3,38.41944722],
	[-0.685,52.2,38.56607514],
	[-0.68,52.1,38.71270306],
	[-0.675,52,38.85933098],
	[-0.67,51.9,39.0059589],
	[-0.665,51.8,39.15258681],
	[-0.66,51.7,39.29921473],
	[-0.655,51.6,39.44584265],
	[-0.65,51.5,39.59247057],
	[-0.645,51.4,39.73909849],
	[-0.64,51.3,39.88572641],
	[-0.635,51.2,40.03235433],
	[-0.63,51.1,40.17898224],
	[-0.625,51,40.32561016],
	[-0.62,50.9,40.47223808],
	[-0.615,50.8,40.618866],
	[-0.61,50.7,40.76549392],
	[-0.605,50.6,40.91212184],
	[-0.6,50.5,41.05874976],
	[-0.595,50.4,41.20537767],
	[-0.59,50.3,41.35200559],
	[-0.585,50.2,41.49863351],
	[-0.58,50.1,41.64526143],
	[-0.575,50,41.79188935],
	[-0.57,49.9,41.93851727],
	[-0.565,49.8,42.08514519],
	[-0.56,49.7,42.2317731],
	[-0.555,49.6,42.37840102],
	[-0.55,49.5,42.52502894],
	[-0.545,49.4,42.67165686],
	[-0.54,49.3,42.81828478],
	[-0.535,49.2,42.9649127],
	[-0.53,49.1,43.11154062],
	[-0.525,49,43.25816853],
	[-0.52,48.9,43.40479645],
	[-0.515,48.8,43.55142437],
	[-0.51,48.7,43.69805229],
	[-0.505,48.6,43.84468021],
	[-0.5,48.5,43.99130813],
	[-0.495,48.4,44.13793605],
	[-0.49,48.3,44.28456396],
	[-0.485,48.2,44.43119188],
	[-0.48,48.1,44.5778198],
	[-0.475,48,44.72444772],
	[-0.47,47.9,44.87107564],
	[-0.465,47.8,45.01770356],
	[-0.46,47.7,45.16433148],
	[-0.455,47.6,45.31095939],
	[-0.45,47.5,45.45758731],
	[-0.445,47.4,45.60421523],
	[-0.44,47.3,45.75084315],
	[-0.435,47.2,45.89747107],
	[-0.43,47.1,46.04409899],
	[-0.425,47,46.19072691],
	[-0.42,46.9,46.33735482],
	[-0.415,46.8,46.48398274],
	[-0.41,46.7,46.63061066],
	[-0.405,46.6,46.77723858],
	[-0.4,46.5,46.9238665],
	[-0.395,46.4,47.07049442],
	[-0.39,46.3,47.21712234],
	[-0.385,46.2,47.36375025],
	[-0.38,46.1,47.51037817],
	[-0.375,46,47.65700609],
	[-0.37,45.9,47.80363401],
	[-0.365,45.8,47.95026193],
	[-0.36,45.7,48.09688985],
	[-0.355,45.6,48.24351777],
	[-0.35,45.5,48.39014568],
	[-0.345,45.4,48.5367736],
	[-0.34,45.3,48.68340152],
	[-0.335,45.2,48.83002944],
	[-0.33,45.1,48.97665736],
	[-0.325,45,49.12328528],
	[-0.32,44.9,49.2699132],
	[-0.315,44.8,49.41654111],
	[-0.31,44.7,49.56316903],
	[-0.305,44.6,49.70979695],
	[-0.3,44.5,49.85642487],
	[-0.295,44.4,50.00305279],
	[-0.29,44.3,50.14968071],
	[-0.285,44.2,50.29630863],
	[-0.28,44.1,50.44293654],
	[-0.275,44,50.58956446],
	[-0.27,43.9,50.73619238],
	[-0.265,43.8,50.8828203],
	[-0.26,43.7,51.02944822],
	[-0.255,43.6,51.17607614],
	[-0.25,43.5,51.32270406],
	[-0.245,43.4,51.46933197],
	[-0.24,43.3,51.61595989],
	[-0.235,43.2,51.76258781],
	[-0.23,43.1,51.90921573],
	[-0.225,43,52.05584365],
	[-0.22,42.9,52.20247157],
	[-0.215,42.8,52.34909949],
	[-0.21,42.7,52.4957274],
	[-0.205,42.6,52.64235532],
	[-0.2,42.5,52.78898324],
	[-0.195,42.4,52.93561116],
	[-0.19,42.3,53.08223908],
	[-0.185,42.2,53.228867],
	[-0.18,42.1,53.37549492],
	[-0.175,42,53.52212283],
	[-0.17,41.9,53.66875075],
	[-0.165,41.8,53.81537867],
	[-0.16,41.7,53.96200659],
	[-0.155,41.6,54.10863451],
	[-0.15,41.5,54.25526243],
	[-0.145,41.4,54.40189035],
	[-0.14,41.3,54.54851826],
	[-0.135,41.2,54.69514618],
	[-0.13,41.1,54.8417741],
	[-0.125,41,54.98840202],
	[-0.12,40.9,55.13502994],
	[-0.115,40.8,55.28165786],
	[-0.11,40.7,55.42828578],
	[-0.105,40.6,55.57491369],
	[-0.1,40.5,55.72154161],
	[-0.095,40.4,55.86816953],
	[-0.09,40.3,56.01479745],
	[-0.085,40.2,56.16142537],
	[-0.08,40.1,56.30805329],
	[-0.075,40,56.45468121],
	[-0.07,39.9,56.60130912],
	[-0.065,39.8,56.74793704],
	[-0.06,39.7,56.89456496],
	[-0.055,39.6,57.04119288],
	[-0.05,39.5,57.1878208],
	[-0.045,39.4,57.33444872],
	[-0.04,39.3,57.48107664],
	[-0.035,39.2,57.62770455],
	[-0.03,39.1,57.77433247],
	[-0.025,39,57.92096039],
	[-0.02,38.9,58.06758831],
	[-0.015,38.8,58.21421623],
	[-0.01,38.7,58.36084415],
	[-0.005,38.6,58.50747207],
	[0,38.5,58.65409998],
	[0.005,38.4,58.8007279],
	[0.01,38.3,58.94735582],
	[0.015,38.2,59.09398374],
	[0.02,38.1,59.24061166],
	[0.025,38,59.38723958],
	[0.03,37.9,59.5338675],
	[0.035,37.8,59.68049541],
	[0.04,37.7,59.82712333],
	[0.045,37.6,59.97375125],
	[0.05,37.5,60.12037917],
	[0.055,37.4,60.26700709],
	[0.06,37.3,60.41363501],
	[0.065,37.2,60.56026293],
	[0.07,37.1,60.70689084],
	[0.075,37,60.85351876],
	[0.08,36.9,61.00014668],
	[0.085,36.8,61.1467746],
	[0.09,36.7,61.29340252],
	[0.095,36.6,61.44003044],
	[0.1,36.5,61.58665836],
	[0.105,36.4,61.73328627],
	[0.11,36.3,61.87991419],
	[0.115,36.2,62.02654211],
	[0.12,36.1,62.17317003],
	[0.125,36,62.31979795],
	[0.13,35.9,62.46642587],
	[0.135,35.8,62.61305379],
	[0.14,35.7,62.7596817],
	[0.145,35.6,62.90630962],
	[0.15,35.5,63.05293754],
	[0.155,35.4,63.19956546],
	[0.16,35.3,63.34619338],
	[0.165,35.2,63.4928213],
	[0.17,35.1,63.63944922],
	[0.175,35,63.78607713],
	[0.18,34.9,63.93270505],
	[0.185,34.8,64.07933297],
	[0.19,34.7,64.22596089],
	[0.195,34.6,64.37258881],
	[0.2,34.5,64.51921673],
	[0.205,34.4,64.66584465],
	[0.21,34.3,64.81247256],
	[0.215,34.2,64.95910048],
	[0.22,34.1,65.1057284],
	[0.225,34,65.25235632],
	[0.23,33.9,65.39898424],
	[0.235,33.8,65.54561216],
	[0.24,33.7,65.69224008],
	[0.245,33.6,65.83886799],
	[0.25,33.5,65.98549591],
	[0.255,33.4,66.13212383],
	[0.26,33.3,66.27875175],
	[0.265,33.2,66.42537967],
	[0.27,33.1,66.57200759],
	[0.275,33,66.7186355],
	[0.28,32.9,66.86526342],
	[0.285,32.8,67.01189134],
	[0.29,32.7,67.15851926],
	[0.295,32.6,67.30514718],
	[0.3,32.5,67.4517751],
	[0.305,32.4,67.59840302],
	[0.31,32.3,67.74503093],
	[0.315,32.2,67.89165885],
	[0.32,32.1,68.03828677],
	[0.325,32,68.18491469],
	[0.33,31.9,68.33154261],
	[0.335,31.8,68.47817053],
	[0.34,31.7,68.62479845],
	[0.345,31.6,68.77142636],
	[0.35,31.5,68.91805428],
	[0.355,31.4,69.0646822],
	[0.36,31.3,69.21131012],
	[0.365,31.2,69.35793804],
	[0.37,31.1,69.50456596],
	[0.375,31,69.65119388],
	[0.38,30.9,69.79782179],
	[0.385,30.8,69.94444971],
	[0.39,30.7,70.09107763],
	[0.395,30.6,70.23770555],
	[0.4,30.5,70.38433347],
	[0.405,30.4,70.53096139],
	[0.41,30.3,70.67758931],
	[0.415,30.2,70.82421722],
	[0.42,30.1,70.97084514],
	[0.425,30,71.11747306],
	[0.43,29.9,71.26410098],
	[0.435,29.8,71.4107289],
	[0.44,29.7,71.55735682],
	[0.445,29.6,71.70398474],
	[0.45,29.5,71.85061265],
	[0.455,29.4,71.99724057],
	[0.46,29.3,72.14386849],
	[0.465,29.2,72.29049641],
	[0.47,29.1,72.43712433],
	[0.475,29,72.58375225],
	[0.48,28.9,72.73038017],
	[0.485,28.8,72.87700808],
	[0.49,28.7,73.023636],
	[0.495,28.6,73.17026392],
	[0.5,28.5,73.31689184]])

dens_co = np.array([-9.02726494,
                        0.108986696,
                        -0.0005189,
                        -2.0646e-5,
                        1.93881e-7,
                        -4.7231e-10, 0])
v_init = 27760
mass_init = 4500
sigma = 0.01/1e6
K = 0.7/(2500)**(2/3)


height_list = np.linspace(85500, 0, 4000)

v = v_init
m = mass_init

t = luminousEfficiency(3, 1, v_init, mass_init)

tau_list = []
tau_list.append([85500, t*100, v_init, mass_init, 1000])

dh = height_list[1] - height_list[0]
lat = np.radians(45.7024)
lon = np.radians(26.9007)
jd = 2457029.54582
sudden_loss = 850
import random
counter = 0
for h in height_list:

	dens = getAtmDensity(lat, lon, h, jd)

	dv = deceleration(K, m, dens, v)
	dm = massLoss(K, sigma, m, dens, v)


	dl = dh/(np.cos(np.radians(47)))
	dt = np.abs(dl/v)


	vel = v + dv*dt
	mass = m + dm*dt

	if np.abs(h - 53500) <= 10:
		mass -= 30

	if 42000 <= h <= 48000:

		mass -= 11.39


	if np.abs(h - 44700) <= 10:
		print("1")
		mass -= 300
	
	if np.abs(h - 43200) <= 10:
		print("2")
		mass -= 500

	if np.abs(h - 42000) <= 10:
		print("3")
		mass -= 100

	if np.abs(h - 41000) <= 10:
		print("4")
		mass -= 10

	if h <= 42000:
		mass -= 1.1

	t = luminousEfficiency(3, 1, vel, mass)

	dyn = dens*vel**2


	tau_list.append([h, t*100, vel, mass, dyn])

	v = vel
	m = mass

tau_list = np.array(tau_list)

data = np.array([[0.009858000137488755, 4429.609300890416],
[0.8667387208628936, 4195.558528162144],
[0.8792236851030195, 3763.90373001826],
[1.389495494373136, 3112.6032895675453],
[1.4095105244410164, 2309.1798560776215],
[1.6496480740980206, 2247.345998883871],
[1.6734104799051615, 1579.16783936594],
[1.74677120801992, 644.8077600240982],
[1.9867199185099855, 610.7375420334304],
[2.1036881784318844, 180.0539902913994],
[2.3251963220650094, 165.97370651171852],
[2.7213387683753085, 34.383159035209836],
[3.007882518043102, 3.6137389607345267],
[3.051209653167377, 0.9557705280602697],
[3.1397452344877848, 0.19799768745384114]])

ho, mo, vo = getO()

to_list = []
dyn_list = []
for ii in range(len(ho)):
	dens = getAtmDensity(lat, lon, ho[ii], jd)
	t = luminousEfficiency(3, 1, vo[ii], mo[ii])
	dyn = dens*vo[ii]**2

	to_list.append(t)
	dyn_list.append(dyn)


plt.plot(tau_list[:, 0]/1000, tau_list[:, 1]/(0.344)*5, label="Previous Version (5.0% at 15 km/s)")
plt.plot(tau_list[:, 0]/1000, tau_list[:, 1]/(0.344)*2.2, label="Previous Version (2.2% at 15 km/s)")
plt.plot(np.array(ho)/1000, np.array(to_list)*100/(0.316)*5, label="New Version (5.0% at 15 km/s)")
plt.plot(np.array(ho)/1000, np.array(to_list)*100/(0.316)*2.2, label="New Version (2.2% at 15 km/s)")
np.set_printoptions(threshold=np.inf)
print(np.array(ho))
print(np.array(to_list))
plt.ylabel("Tau")
plt.xlabel("Height (km)")
plt.ylim([0, 10])
plt.legend()
plt.show()


plt.semilogx(tau_list[:, 4]/1e6, tau_list[:, 2]/1000, label="Previous Version")
plt.semilogx(np.array(dyn_list)/1e6, np.array(vo)/1000, label="New Version")
plt.ylabel("Velocity (km/s)")
plt.xlabel("Dynamic Pressure [MPa]")
plt.legend()
plt.show()

plt.loglog(tau_list[:, 4]/1e6, tau_list[:, 3], label="Previous Version")
plt.scatter(data[:, 0], data[:, 1], label="Borovicka")
plt.loglog(np.array(dyn_list)/1e6, mo, label="New Version")
plt.ylabel("Mass (kg)")
plt.xlabel("Dynamic Pressure [MPa]")
# plt.axvline(x=0.001210611966830714*27671.399566820037**2/1e6)
# plt.axvline(x=0.0026551012397727173*27542.767176247682**2/1e6)
plt.legend()
plt.show()
# luminousEfficiency(3, lum_eff, vel, mass)
# Arguments:
#         lum_eff_type: [int] Lum. eff. model: 
#             0 - constant, 
#             1 - Revelle & Ceplecha (2001): a) Type I, 
#             2 - b) Type II, 
#             3 - c) Type III, 
#             4 - Borovicka et al. (2013) Kosice
#             5 - CAMO faint meteors
#             6 - Celpecha & McCrosky (1976)
#             7 - Borovicka et al. (2020) - Two strengths
#         lum_eff: [double] Value of the constant luminous efficiency (percent).
#         vel: [double] Velocity (m/s).
#         mass: [double] Mass (kg).
#     Return:
#         tau: [double] Luminous efficiency (ratio).



