Supracenter - User Manual
#################################
Supracenter - for spherical sound sources
last edited July 2018
Denis Vida, Peter Brown, Luke McFadden
Thanks to Gunter Stober for advice on atmospheric profiles
Original Genetic Search Supracenter code by Wayne Edwards
Particle Swarm Optimization was added
------------------------------------

#################################
#             Usage             #
#################################
    Most configurable tweaks can be found in mainmenu.py

    Required inputs:
    Instructions on how to set up both below
    --------------------------------
    station data file 
    atmospheric profile file
    --------------------------------

    The station data can be a custom file, or taken from MakeIRISPicks.py

    The atmospheric profile can be a custom file, downloaded manually, or with a script as described below

    The directories of the files must be indicated in the configurable input.ini file, which should be placed in /ini_input folder

    To run, navigate the terminal to the directory of the library, and enter:

        Terminal:
        python -m Supracenter.mainmenu <input.ini>
        
        optional inputs:
            -h - help menu

    where input.ini is a created ini file with the user defined options, see sample.ini in /docs for more information

#################################
#           Features            #
#################################

    ===================================
             Time Restriction
    ===================================
    The time of the supracenter fragmentation can be restricted to help the search, by setting restricted_time to a datetime object. 
    
    Example:
    rest_time = 1989-1-25 20:51:15.100000
    (year, month, day, hour, minute, second, microsecond)

    If the time restriction is used, set the year of rest_time to 1000. If no restricted time is used, the swarm_size variable for the number of search points should be larger, since the error in time will also be searched for. Searching for the time causes the PSO search to move vertically to find the minimum error. A higher number of particles and/or iterations will help in finding the correct elevation with the lowest error.

    ===================================
               Manual Search
    ===================================
    The station residuals for a single point can be calculated

    Variables:
    single_point (within search_area)

    To find the residuals of a single point, list latitude, longitude and elevation in single_point

    Example:
    single_point = 31.790, -106.080, 27600

    To turn off manual search, set single_point = 0, 0, 0 to search automatically with particle swarm optimization or grid search.

    ===================================
             Reference Points
    ===================================
    Cited points or points of interest can be plotted alongside the data for comparison.

    Variables:
    reported_points

    reported points should be a list of lists, each containing a label [String], latitude, longitude, and height [floats] of the point

    Example:
    reported_points = [['Edwards' , 46.418, -122.065, 29820], ['Qamar'   , 46.396, -122.062, 30400]]

    If no reference points are needed, then use:
    reported_points = []

    ===================================
                Weighting
    ===================================
    Stations can be weighted equally or with a cosine taper.

    Variables:
    dmin - float, >= 0
    dmax - float, >= dmin

    Equal Weighting:
    Setting both dmin and dmax to 0 is a special case which sets all stations to an equal weighting of 1

    Cosine Taper:
    dmin and dmax are defined as the distance away from the station that recieves the signal first. Stations closer to the first station than dmin are weighted fully. Stations further away from the first station are ignored. Stations between dmin and dmax are weighted as a cosine taper, as Weight = cos(pi/(d_max - d_min)*(Distance - (d_max - d_min))) + 1)/2, where Distance is the distance from the first station to the station being weighted.

    ====================================
                   Exports
    ====================================
    Station Weather Data:
    The interpolated weather profile from the optimal supracenter to each station is exported as a separate .txt file named by the station. The profile reperesents an approximation of the path as a straight line between the source and the detector. These .txt files are not meant to be used with Supracenter, but are meant as a check to make sure that the input weather data is reasonable. This also shows the latitude and longitude of the points used in the interpolation.

    Output Data:
    A short .txt file that summarizes the results of the simulation and the settings used.

    Output Graph:
    A graph showing the optimal supracenter position in 3-D space with the positions and residuals of the stations shown. If the particle swarm optimization was used, the points searched and their residuals are shown on another graph.

    Output Residuals:
    A graph showing a top view of the optimal supracenter position with the residuals shown more clearly.

    ====================================
                  Fit Type
    ====================================
    L1 Fit:
    Record errors with the absolute difference between the calculated times and the station times.
    Example: R = 1/N * sum(|T_obs - T_calc|)

    L2 Fit:
    Record errors with the square of the difference between the calculated times and the station times.
    Example: R = 1/N * sum(|T_obs - T_calc|^2)

    Fits of order 'n' are possible by changing the value of the fit_type to the required degree.
    For example: fit_type = 5 gives: R = 1/N * sum(|T_obs - T_calc|^5), but answers found this way may be inaccurate without further adjustments done inside the program. The max_error variable is set to work well with L1 and L2 fits.

    See equations (4) and (5) from pg 20 of SUPRACENTER for more details

#################################
#         Search Types          #
#################################

    Particle Swarm Optimization:
    ----------------------------
    More details on the pyswarm algorithm used can be found here: https://pythonhosted.org/pyswarm/#an-interesting-math-problem

    swarm_size and max_iter are the main tweaks to change. A quick search can be done with swarm_size = 20 and max_iter = 20, if there are a lot of good station data and the time is restricted, but may be inaccurate for an unrestricted time. 

    precision determines how accurate the angles are to each station. Decreasing the value will slow down the program, but will return less error Supracenter positions. Values around 1e-25 work the best. If the program runs too slow, try raising the tol variable before raising the precision variable. 

    Particle swarm optimization acts as a swarm searching for a minimum, and tends to travel toward the minimum error. The swarm tends to move vertically around the optimal position when searching for the time of occurence if not restricted.
    ----------------------------

    Grid Search:
    ----------------------------
    Roughly the same setup as Particle Swarm Optimization, the swarm_size is now the number of points in each grid to search with and the max_iter is the number of iterations to put the search through. See Supracenter for more information, the code is a pure translation from Wayne Edwards' original Matlab code.

    The recommended search as given in the original Supracenter code is swarm_size = 60 and max_iter = 30. The number of spacings in the search area is given by size, which is currently fixed at 256, the most precise option from the original code. This can be changed within geneticSearch.py to any power of 2.

    Genetic search divides the search volume into equally spaced grid points and finds the one with the smallest error. The grid is then remade around the best point, and the search is refined. The points used to search are found by a genetic algorithm which acts as "survival of the fittest" for the best points, while keeping the "genetics" of the good points. More information can be found in the Supracenter book by Wayne Edwards. Code for genetic search is nearly identical to the Matlab version given in the Supracenter book.

    If the swarm_size or max_iter variables are set too low, the program will return an error
    ----------------------------

    max_error specifies the largest error possible when plotting data. If there are many large errors when plotting, this should be adjusted.

#################################
#     ini File Instructions     #
#################################
  
    As of Feb. 8, 2019, the ini file for Supracenter has been merged with the ini to run in Fireballs. See wmpl/Fireballs/docs/User Manual.txt, and wmpl/Fireballs/docs/example_ini.ini for more detail

#################################
#   Station Data Instructions   #
#################################
    Supracenter accepts both .txt and .csv formats.

    The .txt inputs are meant for custom input of data by hand, while the .csv inputs are exported from MakeIRISPicks.py

    ===================================
             Station Data.txt
    ===================================
    An example file can be found in /docs/Sample_Custom_Station_Data.txt

    | Name | Lat | Lon | Elev | Time |

    Name - station name/code/identifier
    Lat - latitude of station, in decimal degrees, -90 to +90
    Lon - longitude of station, in decimal degrees, -180 to +180
    Elev - elevation of station, from a consistant reference level, such as sea-level
    Time - time of signal, after a given reference time, in seconds

    ===================================
             Station Data.csv
    ===================================
    Station data can be exported from MakeIRISPicks.py as long as the source location is approximately where the Supracenter is thought to be located.

    An example file can be found in /docs/Sample_Custom_Station_Picks.csv

    | Pick Group | Network | Code | Lat | Lon | Elev | Pick JD |

    Pick Group - pick group from MakeIRISPicks.py
    Network - station network code for station identification 
    Code - station code for station identification
    Lat - latitude of station, in decimal degrees, -90 to +90
    Lon - longitude of station, in decimal degrees, -180 to +180
    Elev - elevation of station, from a consistant reference level, such as sea-level
    Pick JD - time of signal, given as a Julian Date

    -----------------------------------

    The directory and name of the station data file must be indicated in the input .ini file

#################################
# Atmospheric Data Instructions #
#################################

    Note: Weather data has been tested with recent files, older files may have a different format, in which a custom script to read them is required. See netCDFconv.py for more details. 

    Reading the wrong file may cause the program to freeze, such as trying to read UKMO .nc file as an ECMWF .nc file. Killing the program while it is reading the data may corrupt the file (while the message 'Converting weather data. This may take a while...' is in the terminal).  

    Constants used in converting weather values can be found in wmpl/Utils/constants.ini

    ===================================
    UKMO Instructions - Manual Download
    ===================================
    Downloadable files can be found here:
    http://data.ceda.ac.uk/badc/ukmo-assim/

    An account will need to be created in order to access files

    UKMO data is found as a .pp file on the CEDA site

    Supracenter only handles .nc files, so the file needs to be converted.

    ---CONVERT .PP TO .NC-------------------------------------------------
    Download xConv1.94 <replace 1.94 with the current version number>
    http://cms.ncas.ac.uk/documents/xconv/
    and extract xconv1.94 and convsh1.94. Create a symbolic link to convsh: 

    Terminal:
    ln -s xconv1.94 convsh1.94

    In the folder with xconv and convsh, add conv2nc.tcl and runXconv.bat from the xconv_scripts file. Other
    example scripts can be found here: http://cms.ncas.ac.uk/documents/xconv/

    After this setup, .pp files in the folder can be converted to .nc files with the command:
    (Navigate to the folder)

    Terminal:
    ./convsh1.94 ./conv2nc.tcl -i <input file.pp> -o <output file.nc>
    ----------------------------------------------------------------------

    Indicate in the .ini where the .nc file is, and the UKMO data can now be read by Supracenter

    Note: killing the program while reading a .nc file WILL corrupt the file

    Note: Data conversion may not work for older files, and may need to be read with a script

    ====================================
    ECMWF Instructions - Script Download
    ====================================
    Create an account with ECMWF

    Follow the instructions given:
    https://software.ecmwf.int/wiki/display/CKB/How+to+download+data+via+the+ECMWF+WebAPI

    Follow the instructions given up to before making the script, the script is in mainmenu.py:
    https://software.ecmwf.int/wiki/display/CKB/How+to+download+ERA5+data+via+the+ECMWF+Web+API

    Change the ECMWF script in mainmenu.py as needed, indicate the hour of the weather profile needed
    atm_hour is the hour that will be downloaded, if it is available.
    grid_size specifies the spatial resolution of the weather data from ECMWF 

    Note: Automatic data retrival may not work for older files

    ======================================
    MERRA-2 Instructions - Script Download
    ======================================
    Create an account: 
    https://wiki.earthdata.nasa.gov/display/EL/How+To+Register+With+Earthdata+Login

    Link the database with your account:
    https://disc.gsfc.nasa.gov/earthdata-login

    Enter your username and password into fetchMERRA.py

    Specify in the .ini where the file is and the name of the file, indicate the hour of the weather profile needed.
    atm_hour is the hour that will be downloaded, if it is available.

    Note: Automatic data retrival may not work for older files

    ======================================
    MERRA-2 Instructions - Manual Download
    ======================================
    Create an account:
    https://wiki.earthdata.nasa.gov/display/EL/How+To+Register+With+Earthdata+Login

    Link the database with your accout:
    https://disc.gsfc.nasa.gov/earthdata-login

    Download the data from the site:
    https://disc.gsfc.nasa.gov/datasets/M2I3NVASM_V5.12.4/summary?keywords=%22MERRA-2%22

    Go to "subset/get data" and specify what area data is needed. Make sure the file type is HDF
    and the variables contain at least "air_temperature", "northward_wind", "eastward_wind", and "mid_layer_heights"

    Specify in the .ini where the file is and the name of the file

    Note: Data conversion may not work for older files, and may need to be read with a script

    ==================================
    Custom Atmospheric Data
    ==================================
    Create a custom .txt file containing the data, separated by spaces.

    There must be at least two rows for the program to be able to run.

    The format of the .txt file should be:
    --------------------------------------
    *header
    elevation(m) temperature(deg C) wind_speed(m/s) wind_direction(deg from north due east)
    --------------------------------------
   
    Specify in the .ini where the file is.

    ==================================
    Isotropic Atmospheric Data
    ==================================
    No file is required for an isotropic profile.

    The speed_of_sound variable must be set, and the program will make a custom atmospheric dataset using the given speed of sound.